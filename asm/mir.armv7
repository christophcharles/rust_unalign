// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn  main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:18:11: 18:11
    let mut _1: Result;                  // in scope 0 at src/main.rs:19:13: 19:24
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // bb0[0]: scope 0 at src/main.rs:19:13: 19:24
        _1 = const test(const 0u32, const 14u32) -> bb1; // bb0[1]: scope 0 at src/main.rs:19:13: 19:24
                                         // ty::Const
                                         // + ty: fn(u32, u32) -> Result {test}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/main.rs:19:13: 19:17
                                         // + literal: Const { ty: fn(u32, u32) -> Result {test}, val: Scalar(<ZST>) }
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Scalar(0x00000000)
                                         // mir::Constant
                                         // + span: src/main.rs:19:18: 19:19
                                         // + literal: Const { ty: u32, val: Scalar(0x00000000) }
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Scalar(0x0000000e)
                                         // mir::Constant
                                         // + span: src/main.rs:19:21: 19:23
                                         // + literal: Const { ty: u32, val: Scalar(0x0000000e) }
    }

    bb1: {
        StorageDead(_1);                 // bb1[0]: scope 0 at src/main.rs:19:24: 19:25
        return;                          // bb1[1]: scope 0 at src/main.rs:20:2: 20:2
    }
}

fn  Result::Err(_1: ErrorTest) -> Result {
    let mut _0: Result;                  // return place in scope 0 at src/main.rs:3:5: 3:19

    bb0: {
        ((_0 as Err).0: ErrorTest) = move _1; // bb0[0]: scope 0 at src/main.rs:3:5: 3:19
        discriminant(_0) = 1;            // bb0[1]: scope 0 at src/main.rs:3:5: 3:19
        return;                          // bb0[2]: scope 0 at src/main.rs:3:5: 3:19
    }
}

fn  Result::Ok(_1: u32) -> Result {
    let mut _0: Result;                  // return place in scope 0 at src/main.rs:2:5: 2:12

    bb0: {
        ((_0 as Ok).0: u32) = move _1;   // bb0[0]: scope 0 at src/main.rs:2:5: 2:12
        discriminant(_0) = 0;            // bb0[1]: scope 0 at src/main.rs:2:5: 2:12
        return;                          // bb0[2]: scope 0 at src/main.rs:2:5: 2:12
    }
}

fn  test(_1: u32, _2: u32) -> Result {
    let mut _0: Result;                  // return place in scope 0 at src/main.rs:11:32: 11:38
    let mut _3: bool;                    // in scope 0 at src/main.rs:12:8: 12:16
    let mut _4: u32;                     // in scope 0 at src/main.rs:12:8: 12:11
    let mut _5: u32;                     // in scope 0 at src/main.rs:13:27: 13:30
    let mut _6: ErrorTest;               // in scope 0 at src/main.rs:15:17: 15:38

    bb0: {
        StorageLive(_3);                 // bb0[0]: scope 0 at src/main.rs:12:8: 12:16
        StorageLive(_4);                 // bb0[1]: scope 0 at src/main.rs:12:8: 12:11
        _4 = _2;                         // bb0[2]: scope 0 at src/main.rs:12:8: 12:11
        _3 = Lt(move _4, const 32u32);   // bb0[3]: scope 0 at src/main.rs:12:8: 12:16
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Scalar(0x00000020)
                                         // mir::Constant
                                         // + span: src/main.rs:12:14: 12:16
                                         // + literal: Const { ty: u32, val: Scalar(0x00000020) }
        StorageDead(_4);                 // bb0[4]: scope 0 at src/main.rs:12:15: 12:16
        switchInt(_3) -> [false: bb1, otherwise: bb2]; // bb0[5]: scope 0 at src/main.rs:12:5: 14:6
    }

    bb1: {
        StorageDead(_3);                 // bb1[0]: scope 0 at src/main.rs:14:5: 14:6
        StorageLive(_6);                 // bb1[1]: scope 0 at src/main.rs:15:17: 15:38
        discriminant(_6) = 0;            // bb1[2]: scope 0 at src/main.rs:15:17: 15:38
        ((_0 as Err).0: ErrorTest) = move _6; // bb1[3]: scope 0 at src/main.rs:15:5: 15:39
        discriminant(_0) = 1;            // bb1[4]: scope 0 at src/main.rs:15:5: 15:39
        StorageDead(_6);                 // bb1[5]: scope 0 at src/main.rs:15:38: 15:39
        goto -> bb3;                     // bb1[6]: scope 0 at src/main.rs:16:2: 16:2
    }

    bb2: {
        StorageLive(_5);                 // bb2[0]: scope 0 at src/main.rs:13:27: 13:30
        _5 = _1;                         // bb2[1]: scope 0 at src/main.rs:13:27: 13:30
        ((_0 as Ok).0: u32) = move _5;   // bb2[2]: scope 0 at src/main.rs:13:16: 13:31
        discriminant(_0) = 0;            // bb2[3]: scope 0 at src/main.rs:13:16: 13:31
        StorageDead(_5);                 // bb2[4]: scope 0 at src/main.rs:13:30: 13:31
        StorageDead(_3);                 // bb2[5]: scope 0 at src/main.rs:14:5: 14:6
        goto -> bb3;                     // bb2[6]: scope 0 at src/main.rs:13:9: 13:31
    }

    bb3: {
        return;                          // bb3[0]: scope 0 at src/main.rs:16:2: 16:2
    }
}
